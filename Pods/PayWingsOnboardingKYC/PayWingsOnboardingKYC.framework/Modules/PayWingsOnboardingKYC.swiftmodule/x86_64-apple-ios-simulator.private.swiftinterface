// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PayWingsOnboardingKYC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreTelephony
import Dispatch
import Foundation
import IdensicMobileSDK
import MobileCoreServices
@_exported import PayWingsOnboardingKYC
import Swift
import SystemConfiguration
import UIKit
import VideoID
import _Concurrency
import _StringProcessing
public struct PhoneNumber : Swift.Codable {
  public let numberString: Swift.String
  public let countryCode: Swift.UInt64
  public let leadingZero: Swift.Bool
  public let nationalNumber: Swift.UInt64
  public let numberExtension: Swift.String?
  public let type: PayWingsOnboardingKYC.PhoneNumberType
  public let regionID: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension PayWingsOnboardingKYC.PhoneNumber : Swift.Equatable {
  public static func == (lhs: PayWingsOnboardingKYC.PhoneNumber, rhs: PayWingsOnboardingKYC.PhoneNumber) -> Swift.Bool
}
extension PayWingsOnboardingKYC.PhoneNumber : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.PhoneNumber {
  public static func notPhoneNumber() -> PayWingsOnboardingKYC.PhoneNumber
  public func notParsed() -> Swift.Bool
}
extension PayWingsOnboardingKYC.PhoneNumber {
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String) throws
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String, region: Swift.String) throws
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: PayWingsOnboardingKYC.URLRequestConvertible, with parameters: PayWingsOnboardingKYC.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : PayWingsOnboardingKYC.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: PayWingsOnboardingKYC.URLEncoding.Destination, b: PayWingsOnboardingKYC.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: PayWingsOnboardingKYC.URLEncoding.ArrayEncoding, b: PayWingsOnboardingKYC.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: PayWingsOnboardingKYC.URLEncoding.BoolEncoding, b: PayWingsOnboardingKYC.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: PayWingsOnboardingKYC.URLEncoding {
    get
  }
  public static var queryString: PayWingsOnboardingKYC.URLEncoding {
    get
  }
  public static var httpBody: PayWingsOnboardingKYC.URLEncoding {
    get
  }
  public let destination: PayWingsOnboardingKYC.URLEncoding.Destination
  public let arrayEncoding: PayWingsOnboardingKYC.URLEncoding.ArrayEncoding
  public let boolEncoding: PayWingsOnboardingKYC.URLEncoding.BoolEncoding
  public init(destination: PayWingsOnboardingKYC.URLEncoding.Destination = .methodDependent, arrayEncoding: PayWingsOnboardingKYC.URLEncoding.ArrayEncoding = .brackets, boolEncoding: PayWingsOnboardingKYC.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: PayWingsOnboardingKYC.URLRequestConvertible, with parameters: PayWingsOnboardingKYC.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : PayWingsOnboardingKYC.ParameterEncoding {
  public static var `default`: PayWingsOnboardingKYC.JSONEncoding {
    get
  }
  public static var prettyPrinted: PayWingsOnboardingKYC.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: PayWingsOnboardingKYC.URLRequestConvertible, with parameters: PayWingsOnboardingKYC.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: PayWingsOnboardingKYC.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: PayWingsOnboardingKYC.URLEncodedFormEncoder.ArrayEncoding, b: PayWingsOnboardingKYC.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: PayWingsOnboardingKYC.URLEncodedFormEncoder.BoolEncoding, b: PayWingsOnboardingKYC.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: PayWingsOnboardingKYC.URLEncodedFormEncoder.SpaceEncoding, b: PayWingsOnboardingKYC.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: PayWingsOnboardingKYC.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : PayWingsOnboardingKYC.DataResponseSerializerProtocol, PayWingsOnboardingKYC.DownloadResponseSerializerProtocol {
  var dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : PayWingsOnboardingKYC.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : PayWingsOnboardingKYC.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension PayWingsOnboardingKYC.ResponseSerializer {
  public static var defaultDataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension PayWingsOnboardingKYC.DownloadResponseSerializerProtocol where Self : PayWingsOnboardingKYC.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension PayWingsOnboardingKYC.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (PayWingsOnboardingKYC.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (PayWingsOnboardingKYC.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : PayWingsOnboardingKYC.DataResponseSerializerProtocol
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (PayWingsOnboardingKYC.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (PayWingsOnboardingKYC.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : PayWingsOnboardingKYC.DownloadResponseSerializerProtocol
}
final public class DataResponseSerializer : PayWingsOnboardingKYC.ResponseSerializer {
  final public let dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod>
  public init(dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension PayWingsOnboardingKYC.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (PayWingsOnboardingKYC.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (PayWingsOnboardingKYC.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : PayWingsOnboardingKYC.ResponseSerializer {
  final public let dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod>
  public init(dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension PayWingsOnboardingKYC.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (PayWingsOnboardingKYC.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (PayWingsOnboardingKYC.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
final public class JSONResponseSerializer : PayWingsOnboardingKYC.ResponseSerializer {
  final public let dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension PayWingsOnboardingKYC.DataRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (PayWingsOnboardingKYC.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (PayWingsOnboardingKYC.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: PayWingsOnboardingKYC.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension PayWingsOnboardingKYC.Empty : PayWingsOnboardingKYC.EmptyResponse {
  public static func emptyValue() -> PayWingsOnboardingKYC.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : PayWingsOnboardingKYC.DataDecoder {
}
extension Foundation.PropertyListDecoder : PayWingsOnboardingKYC.DataDecoder {
}
final public class DecodableResponseSerializer<T> : PayWingsOnboardingKYC.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor
  final public let decoder: PayWingsOnboardingKYC.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod>
  public init(dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension PayWingsOnboardingKYC.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (PayWingsOnboardingKYC.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (PayWingsOnboardingKYC.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : PayWingsOnboardingKYC.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: PayWingsOnboardingKYC.DataDecoder
  public let dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor
  public init(decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), dataPreprocessor: PayWingsOnboardingKYC.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : PayWingsOnboardingKYC.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : PayWingsOnboardingKYC.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension PayWingsOnboardingKYC.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping PayWingsOnboardingKYC.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping PayWingsOnboardingKYC.DataStreamRequest.Handler<Serializer.SerializedObject, PayWingsOnboardingKYC.AFError>) -> Self where Serializer : PayWingsOnboardingKYC.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping PayWingsOnboardingKYC.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), preprocessor: PayWingsOnboardingKYC.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping PayWingsOnboardingKYC.DataStreamRequest.Handler<T, PayWingsOnboardingKYC.AFError>) -> Self where T : Swift.Decodable
}
public typealias CPVCountry = PayWingsOnboardingKYC.Country
public enum SearchBarPosition {
  case tableViewHeader, navigationBar, hidden
  public static func == (a: PayWingsOnboardingKYC.SearchBarPosition, b: PayWingsOnboardingKYC.SearchBarPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Country : Swift.Equatable {
  public let name: Swift.String
  public let code: Swift.String
  public let phoneCode: Swift.String
  public func localizedName(_ locale: Foundation.Locale = Locale.current) -> Swift.String?
  public var flag: UIKit.UIImage {
    get
  }
}
public func == (lhs: PayWingsOnboardingKYC.Country, rhs: PayWingsOnboardingKYC.Country) -> Swift.Bool
public func != (lhs: PayWingsOnboardingKYC.Country, rhs: PayWingsOnboardingKYC.Country) -> Swift.Bool
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CountryPickerView : PayWingsOnboardingKYC.NibView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var flagImageView: UIKit.UIImageView! {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var countryDetailsLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) public var showCountryCodeInView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var showPhoneCodeInView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var showCountryNameInView: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var font: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var flagSpacingInView: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var dataSource: PayWingsOnboardingKYC.CountryPickerViewDataSource?
  @_Concurrency.MainActor(unsafe) weak public var delegate: PayWingsOnboardingKYC.CountryPickerViewDelegate?
  @_Concurrency.MainActor(unsafe) weak public var hostViewController: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public var selectedCountry: PayWingsOnboardingKYC.Country {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func showCountriesList(from viewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) final public let countries: [PayWingsOnboardingKYC.Country]
  @objc deinit
}
extension PayWingsOnboardingKYC.CountryPickerView {
  @_Concurrency.MainActor(unsafe) public func setCountryByName(_ name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setCountryByPhoneCode(_ phoneCode: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setCountryByCode(_ code: Swift.String)
  @_Concurrency.MainActor(unsafe) public func getCountryByName(_ name: Swift.String) -> PayWingsOnboardingKYC.Country?
  @_Concurrency.MainActor(unsafe) public func getCountryByPhoneCode(_ phoneCode: Swift.String) -> PayWingsOnboardingKYC.Country?
  @_Concurrency.MainActor(unsafe) public func getCountryByCode(_ code: Swift.String) -> PayWingsOnboardingKYC.Country?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: PayWingsOnboardingKYC.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [PayWingsOnboardingKYC.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: PayWingsOnboardingKYC.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: PayWingsOnboardingKYC.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> PayWingsOnboardingKYC.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension PayWingsOnboardingKYC.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension PayWingsOnboardingKYC.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: PayWingsOnboardingKYC.HTTPHeader...)
  public typealias ArrayLiteralElement = PayWingsOnboardingKYC.HTTPHeader
}
extension PayWingsOnboardingKYC.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[PayWingsOnboardingKYC.HTTPHeader]>
}
extension PayWingsOnboardingKYC.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> PayWingsOnboardingKYC.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = PayWingsOnboardingKYC.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<PayWingsOnboardingKYC.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[PayWingsOnboardingKYC.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<PayWingsOnboardingKYC.HTTPHeaders>
}
extension PayWingsOnboardingKYC.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PayWingsOnboardingKYC.HTTPHeader, b: PayWingsOnboardingKYC.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension PayWingsOnboardingKYC.HTTPHeader {
  public static func accept(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func authorization(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func contentType(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> PayWingsOnboardingKYC.HTTPHeader
}
extension PayWingsOnboardingKYC.HTTPHeaders {
  public static let `default`: PayWingsOnboardingKYC.HTTPHeaders
}
extension PayWingsOnboardingKYC.HTTPHeader {
  public static let defaultAcceptEncoding: PayWingsOnboardingKYC.HTTPHeader
  public static let defaultAcceptLanguage: PayWingsOnboardingKYC.HTTPHeader
  public static let defaultUserAgent: PayWingsOnboardingKYC.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: PayWingsOnboardingKYC.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: PayWingsOnboardingKYC.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: PayWingsOnboardingKYC.HTTPHeaders {
    get
    set
  }
}
@_hasMissingDesignatedInitializers final public class PayWingsOnboardingKyc {
  public static func startKyc(vc: UIKit.UIViewController, config: PayWingsOnboardingKYC.KycConfig, result: PayWingsOnboardingKYC.VerificationResult)
  @objc deinit
}
final public class KycConfig {
  public init(credentials: PayWingsOnboardingKYC.KycCredentials, settings: PayWingsOnboardingKYC.KycSettings, userData: PayWingsOnboardingKYC.KycUserData?)
  @objc deinit
}
final public class KycCredentials {
  public init(username: Swift.String, password: Swift.String, endpointUrl: Swift.String)
  @objc deinit
}
final public class KycSettings {
  public init(referenceID: Swift.String?, referenceNumber: Swift.String?, language: Swift.String?)
  @objc deinit
}
final public class KycUserData {
  public init(firstName: Swift.String?, middleName: Swift.String?, lastName: Swift.String?, address1: Swift.String?, address2: Swift.String?, address3: Swift.String?, zipCode: Swift.String?, city: Swift.String?, state: Swift.String?, countryCode: Swift.String?, email: Swift.String?, mobileNumber: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CountryPickerViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) public var searchController: UIKit.UISearchController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PayWingsOnboardingKYC.CountryPickerViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
}
extension PayWingsOnboardingKYC.CountryPickerViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension PayWingsOnboardingKYC.CountryPickerViewController : UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
extension PayWingsOnboardingKYC.CountryPickerViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
}
extension PayWingsOnboardingKYC.CountryPickerViewController : UIKit.UISearchControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func willPresentSearchController(_ searchController: UIKit.UISearchController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func willDismissSearchController(_ searchController: UIKit.UISearchController)
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: PayWingsOnboardingKYC.ResponseCacher
  public static let doNotCache: PayWingsOnboardingKYC.ResponseCacher
  public let behavior: PayWingsOnboardingKYC.ResponseCacher.Behavior
  public init(behavior: PayWingsOnboardingKYC.ResponseCacher.Behavior)
}
extension PayWingsOnboardingKYC.ResponseCacher : PayWingsOnboardingKYC.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct MetadataTerritory : Swift.Decodable {
  public let codeID: Swift.String
  public let countryCode: Swift.UInt64
  public let internationalPrefix: Swift.String?
  public let mainCountryForCode: Swift.Bool
  public let nationalPrefix: Swift.String?
  public let nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixForParsing: Swift.String?
  public let nationalPrefixTransformRule: Swift.String?
  public let preferredExtnPrefix: Swift.String?
  public let emergency: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let fixedLine: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let generalDesc: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let mobile: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let pager: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let personalNumber: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let premiumRate: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let sharedCost: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let tollFree: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let voicemail: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let voip: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let uan: PayWingsOnboardingKYC.MetadataPhoneNumberDesc?
  public let numberFormats: [PayWingsOnboardingKYC.MetadataPhoneNumberFormat]
  public let leadingDigits: Swift.String?
}
public struct MetadataPhoneNumberDesc : Swift.Decodable {
  public let exampleNumber: Swift.String?
  public let nationalNumberPattern: Swift.String?
  public let possibleNumberPattern: Swift.String?
  public let possibleLengths: PayWingsOnboardingKYC.MetadataPossibleLengths?
  public init(from decoder: Swift.Decoder) throws
}
public struct MetadataPossibleLengths : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct MetadataPhoneNumberFormat : Swift.Decodable {
  public let pattern: Swift.String?
  public let format: Swift.String?
  public let intlFormat: Swift.String?
  public let leadingDigitsPatterns: [Swift.String]?
  public var nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixOptionalWhenFormatting: Swift.Bool?
  public let domesticCarrierCodeFormattingRule: Swift.String?
}
open class RetryPolicy : PayWingsOnboardingKYC.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: PayWingsOnboardingKYC.Request, for session: PayWingsOnboardingKYC.Session, dueTo error: Swift.Error, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
  open func shouldRetry(request: PayWingsOnboardingKYC.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
open class ConnectionLostRetryPolicy : PayWingsOnboardingKYC.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
@objc open class PhoneNumberFormatter : Foundation.Formatter {
  final public let phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit
  @objc dynamic public var generatesPhoneNumber: Swift.Bool
  @objc dynamic public var defaultRegion: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public var withPrefix: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var currentRegion: Swift.String {
    @objc get
  }
  public init(phoneNumberKit pnk: PayWingsOnboardingKYC.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension PayWingsOnboardingKYC.PhoneNumberFormatter {
  @objc override dynamic open func string(for obj: Any?) -> Swift.String?
  @objc override dynamic open func getObjectValue(_ obj: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>?, for string: Swift.String, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc override dynamic open func isPartialStringValid(_ partialStringPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString>, proposedSelectedRange proposedSelRangePtr: Foundation.NSRangePointer?, originalString origString: Swift.String, originalSelectedRange origSelRange: Foundation.NSRange, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: PayWingsOnboardingKYC.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping PayWingsOnboardingKYC.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus, b: PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
extension PayWingsOnboardingKYC.MetadataTerritory {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case codeID
    case countryCode
    case internationalPrefix
    case mainCountryForCode
    case nationalPrefix
    case nationalPrefixFormattingRule
    case nationalPrefixForParsing
    case nationalPrefixTransformRule
    case preferredExtnPrefix
    case emergency
    case fixedLine
    case generalDesc
    case mobile
    case pager
    case personalNumber
    case premiumRate
    case sharedCost
    case tollFree
    case voicemail
    case voip
    case uan
    case numberFormats
    case leadingDigits
    case availableFormats
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
}
extension PayWingsOnboardingKYC.MetadataPhoneNumberFormat {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case pattern
    case format
    case intlFormat
    case leadingDigitsPatterns
    case nationalPrefixFormattingRule
    case nationalPrefixOptionalWhenFormatting
    case domesticCarrierCodeFormattingRule
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: PayWingsOnboardingKYC.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: PayWingsOnboardingKYC.AlamofireExtension<Self.ExtendedType> { get set }
}
extension PayWingsOnboardingKYC.AlamofireExtended {
  public static var af: PayWingsOnboardingKYC.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: PayWingsOnboardingKYC.AlamofireExtension<Self> {
    get
    set
  }
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : PayWingsOnboardingKYC.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : PayWingsOnboardingKYC.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> PayWingsOnboardingKYC.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : PayWingsOnboardingKYC.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : PayWingsOnboardingKYC.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public static let ocsp: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public static let preferCRL: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public static let any: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public typealias Element = PayWingsOnboardingKYC.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PinnedCertificatesTrustEvaluator : PayWingsOnboardingKYC.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PublicKeysTrustEvaluator : PayWingsOnboardingKYC.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class CompositeTrustEvaluator : PayWingsOnboardingKYC.ServerTrustEvaluating {
  public init(evaluators: [PayWingsOnboardingKYC.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = PayWingsOnboardingKYC.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : PayWingsOnboardingKYC.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == PayWingsOnboardingKYC.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
public enum PhoneNumberError : Swift.Error {
  case generalError
  case invalidCountryCode
  case notANumber
  case unknownType
  case tooLong
  case tooShort
  case deprecated
  case metadataNotFound
  public static func == (a: PayWingsOnboardingKYC.PhoneNumberError, b: PayWingsOnboardingKYC.PhoneNumberError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.PhoneNumberError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhoneNumberFormat {
  case e164
  case international
  case national
  public static func == (a: PayWingsOnboardingKYC.PhoneNumberFormat, b: PayWingsOnboardingKYC.PhoneNumberFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PhoneNumberType : Swift.String, Swift.Codable {
  case fixedLine
  case mobile
  case fixedOrMobile
  case pager
  case personalNumber
  case premiumRate
  case sharedCost
  case tollFree
  case voicemail
  case voip
  case uan
  case unknown
  case notParsed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PossibleLengthType : Swift.String, Swift.Codable {
  case national
  case localOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: PayWingsOnboardingKYC.HTTPMethod
  public static let delete: PayWingsOnboardingKYC.HTTPMethod
  public static let get: PayWingsOnboardingKYC.HTTPMethod
  public static let head: PayWingsOnboardingKYC.HTTPMethod
  public static let options: PayWingsOnboardingKYC.HTTPMethod
  public static let patch: PayWingsOnboardingKYC.HTTPMethod
  public static let post: PayWingsOnboardingKYC.HTTPMethod
  public static let put: PayWingsOnboardingKYC.HTTPMethod
  public static let trace: PayWingsOnboardingKYC.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: PayWingsOnboardingKYC.Redirector
  public static let doNotFollow: PayWingsOnboardingKYC.Redirector
  public let behavior: PayWingsOnboardingKYC.Redirector.Behavior
  public init(behavior: PayWingsOnboardingKYC.Redirector.Behavior)
}
extension PayWingsOnboardingKYC.Redirector : PayWingsOnboardingKYC.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: PayWingsOnboardingKYC.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: PayWingsOnboardingKYC.Request, for session: PayWingsOnboardingKYC.Session, dueTo error: Swift.Error, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : PayWingsOnboardingKYC.RequestAdapter, PayWingsOnboardingKYC.RequestRetrier {
}
extension PayWingsOnboardingKYC.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: PayWingsOnboardingKYC.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: PayWingsOnboardingKYC.Request, for session: PayWingsOnboardingKYC.Session, dueTo error: Swift.Error, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, PayWingsOnboardingKYC.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (PayWingsOnboardingKYC.Request, PayWingsOnboardingKYC.Session, Swift.Error, _ completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : PayWingsOnboardingKYC.RequestInterceptor {
  public init(_ adaptHandler: @escaping PayWingsOnboardingKYC.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: PayWingsOnboardingKYC.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
open class Retrier : PayWingsOnboardingKYC.RequestInterceptor {
  public init(_ retryHandler: @escaping PayWingsOnboardingKYC.RetryHandler)
  open func retry(_ request: PayWingsOnboardingKYC.Request, for session: PayWingsOnboardingKYC.Session, dueTo error: Swift.Error, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
  @objc deinit
}
open class Interceptor : PayWingsOnboardingKYC.RequestInterceptor {
  final public let adapters: [PayWingsOnboardingKYC.RequestAdapter]
  final public let retriers: [PayWingsOnboardingKYC.RequestRetrier]
  public init(adaptHandler: @escaping PayWingsOnboardingKYC.AdaptHandler, retryHandler: @escaping PayWingsOnboardingKYC.RetryHandler)
  public init(adapter: PayWingsOnboardingKYC.RequestAdapter, retrier: PayWingsOnboardingKYC.RequestRetrier)
  public init(adapters: [PayWingsOnboardingKYC.RequestAdapter] = [], retriers: [PayWingsOnboardingKYC.RequestRetrier] = [], interceptors: [PayWingsOnboardingKYC.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: PayWingsOnboardingKYC.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: PayWingsOnboardingKYC.Request, for session: PayWingsOnboardingKYC.Session, dueTo error: Swift.Error, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
  @objc deinit
}
extension Foundation.URLSessionConfiguration : PayWingsOnboardingKYC.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension PayWingsOnboardingKYC.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : PayWingsOnboardingKYC.ParameterEncoder {
  public static var `default`: PayWingsOnboardingKYC.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: PayWingsOnboardingKYC.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: PayWingsOnboardingKYC.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
open class URLEncodedFormParameterEncoder : PayWingsOnboardingKYC.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: PayWingsOnboardingKYC.URLEncodedFormParameterEncoder.Destination, b: PayWingsOnboardingKYC.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: PayWingsOnboardingKYC.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: PayWingsOnboardingKYC.URLEncodedFormEncoder
  final public let destination: PayWingsOnboardingKYC.URLEncodedFormParameterEncoder.Destination
  public init(encoder: PayWingsOnboardingKYC.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: PayWingsOnboardingKYC.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
public typealias AFResult<Success> = Swift.Result<Success, PayWingsOnboardingKYC.AFError>
final public class VerificationResult {
  weak final public var delegate: PayWingsOnboardingKYC.VerificationResultDelegate?
  public init()
  @objc deinit
}
public protocol VerificationResultDelegate : AnyObject {
  func success(result: PayWingsOnboardingKYC.SuccessEvent)
  func error(result: PayWingsOnboardingKYC.ErrorEvent)
}
@_hasMissingDesignatedInitializers final public class SuccessEvent {
  final public let AppReferenceID: Swift.String?
  final public let ReferenceNumber: Swift.String?
  final public let KycReferenceID: Swift.String?
  final public let KycID: Swift.String?
  final public let PersonID: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ErrorEvent {
  final public let AppReferenceID: Swift.String?
  final public let ReferenceNumber: Swift.String?
  final public let KycReferenceID: Swift.String?
  final public let KycID: Swift.String?
  final public let PersonID: Swift.String?
  final public let StatusCode: Swift.Int
  final public let StatusDescription: Swift.String
  @objc deinit
}
extension Foundation.URLRequest {
  public var method: PayWingsOnboardingKYC.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: PayWingsOnboardingKYC.Request.State, b: PayWingsOnboardingKYC.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: PayWingsOnboardingKYC.EventMonitor?
  final public let interceptor: PayWingsOnboardingKYC.RequestInterceptor?
  weak public var delegate: PayWingsOnboardingKYC.RequestDelegate? {
    get
  }
  public var state: PayWingsOnboardingKYC.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: PayWingsOnboardingKYC.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: PayWingsOnboardingKYC.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: PayWingsOnboardingKYC.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping PayWingsOnboardingKYC.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping PayWingsOnboardingKYC.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: PayWingsOnboardingKYC.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: PayWingsOnboardingKYC.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @objc deinit
}
extension PayWingsOnboardingKYC.Request : Swift.Equatable {
  public static func == (lhs: PayWingsOnboardingKYC.Request, rhs: PayWingsOnboardingKYC.Request) -> Swift.Bool
}
extension PayWingsOnboardingKYC.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension PayWingsOnboardingKYC.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: PayWingsOnboardingKYC.Request)
  func retryResult(for request: PayWingsOnboardingKYC.Request, dueTo error: PayWingsOnboardingKYC.AFError, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
  func retryRequest(_ request: PayWingsOnboardingKYC.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : PayWingsOnboardingKYC.Request {
  final public let convertible: PayWingsOnboardingKYC.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping PayWingsOnboardingKYC.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : PayWingsOnboardingKYC.Request {
  public typealias Handler<Success, Failure> = (PayWingsOnboardingKYC.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: PayWingsOnboardingKYC.DataStreamRequest.Event<Success, Failure>
    public let token: PayWingsOnboardingKYC.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(PayWingsOnboardingKYC.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: PayWingsOnboardingKYC.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: PayWingsOnboardingKYC.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping PayWingsOnboardingKYC.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension PayWingsOnboardingKYC.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: PayWingsOnboardingKYC.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : PayWingsOnboardingKYC.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: PayWingsOnboardingKYC.DownloadRequest.Options
    public static let removePreviousFile: PayWingsOnboardingKYC.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = PayWingsOnboardingKYC.DownloadRequest.Options
    public typealias Element = PayWingsOnboardingKYC.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: PayWingsOnboardingKYC.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: PayWingsOnboardingKYC.DownloadRequest.Options = []) -> PayWingsOnboardingKYC.DownloadRequest.Destination
  public enum Downloadable {
    case request(PayWingsOnboardingKYC.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: PayWingsOnboardingKYC.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping PayWingsOnboardingKYC.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : PayWingsOnboardingKYC.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: PayWingsOnboardingKYC.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: PayWingsOnboardingKYC.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> PayWingsOnboardingKYC.UploadRequest.Uploadable
}
extension PayWingsOnboardingKYC.UploadRequest.Uploadable : PayWingsOnboardingKYC.UploadableConvertible {
  public func createUploadable() throws -> PayWingsOnboardingKYC.UploadRequest.Uploadable
}
public protocol UploadConvertible : PayWingsOnboardingKYC.URLRequestConvertible, PayWingsOnboardingKYC.UploadableConvertible {
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = PayWingsOnboardingKYC.DataResponse<Value, PayWingsOnboardingKYC.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: PayWingsOnboardingKYC.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : PayWingsOnboardingKYC.ResponseSerializer
  public init<Serializer>(_ request: PayWingsOnboardingKYC.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : PayWingsOnboardingKYC.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, PayWingsOnboardingKYC.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, PayWingsOnboardingKYC.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == PayWingsOnboardingKYC.DataResponse<Value, PayWingsOnboardingKYC.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension PayWingsOnboardingKYC.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: PayWingsOnboardingKYC.DataRequest, queue: Dispatch.DispatchQueue)
}
extension PayWingsOnboardingKYC.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DataResponsePublisher<T> where Serializer : PayWingsOnboardingKYC.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: PayWingsOnboardingKYC.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> PayWingsOnboardingKYC.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: PayWingsOnboardingKYC.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> PayWingsOnboardingKYC.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: PayWingsOnboardingKYC.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> PayWingsOnboardingKYC.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = PayWingsOnboardingKYC.DataStreamRequest.Stream<Value, PayWingsOnboardingKYC.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: PayWingsOnboardingKYC.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : PayWingsOnboardingKYC.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, PayWingsOnboardingKYC.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, PayWingsOnboardingKYC.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == PayWingsOnboardingKYC.DataStreamRequest.Stream<Value, PayWingsOnboardingKYC.AFError>
}
extension PayWingsOnboardingKYC.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DataStreamPublisher<Serializer.SerializedObject> where Serializer : PayWingsOnboardingKYC.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), preprocessor: PayWingsOnboardingKYC.DataPreprocessor = PassthroughPreprocessor()) -> PayWingsOnboardingKYC.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = PayWingsOnboardingKYC.DownloadResponse<Value, PayWingsOnboardingKYC.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: PayWingsOnboardingKYC.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : PayWingsOnboardingKYC.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: PayWingsOnboardingKYC.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : PayWingsOnboardingKYC.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, PayWingsOnboardingKYC.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, PayWingsOnboardingKYC.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == PayWingsOnboardingKYC.DownloadResponse<Value, PayWingsOnboardingKYC.AFError>
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DownloadResponsePublisher<T> where Serializer : PayWingsOnboardingKYC.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DownloadResponsePublisher<T> where Serializer : PayWingsOnboardingKYC.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: PayWingsOnboardingKYC.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> PayWingsOnboardingKYC.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: PayWingsOnboardingKYC.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> PayWingsOnboardingKYC.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: PayWingsOnboardingKYC.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: PayWingsOnboardingKYC.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<PayWingsOnboardingKYC.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> PayWingsOnboardingKYC.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension PayWingsOnboardingKYC.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: PayWingsOnboardingKYC.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension PayWingsOnboardingKYC.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> PayWingsOnboardingKYC.DownloadResponsePublisher<Foundation.URL?>
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : PayWingsOnboardingKYC.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: PayWingsOnboardingKYC.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: PayWingsOnboardingKYC.AuthenticationError, b: PayWingsOnboardingKYC.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : PayWingsOnboardingKYC.RequestInterceptor where AuthenticatorType : PayWingsOnboardingKYC.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: PayWingsOnboardingKYC.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: PayWingsOnboardingKYC.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: PayWingsOnboardingKYC.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: PayWingsOnboardingKYC.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: PayWingsOnboardingKYC.Request, for session: PayWingsOnboardingKYC.Session, dueTo error: Swift.Error, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: PayWingsOnboardingKYC.JSON) throws
  public func merged(with other: PayWingsOnboardingKYC.JSON) throws -> PayWingsOnboardingKYC.JSON
  public var type: PayWingsOnboardingKYC.`Type` {
    get
  }
  public var error: PayWingsOnboardingKYC.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: PayWingsOnboardingKYC.JSON {
    get
  }
  public static var null: PayWingsOnboardingKYC.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: PayWingsOnboardingKYC.Index<T>, rhs: PayWingsOnboardingKYC.Index<T>) -> Swift.Bool
  public static func < (lhs: PayWingsOnboardingKYC.Index<T>, rhs: PayWingsOnboardingKYC.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = PayWingsOnboardingKYC.Index<PayWingsOnboardingKYC.JSON>
public typealias JSONRawIndex = PayWingsOnboardingKYC.Index<Any>
extension PayWingsOnboardingKYC.JSON : Swift.Collection {
  public typealias Index = PayWingsOnboardingKYC.JSONRawIndex
  public var startIndex: PayWingsOnboardingKYC.JSON.Index {
    get
  }
  public var endIndex: PayWingsOnboardingKYC.JSON.Index {
    get
  }
  public func index(after i: PayWingsOnboardingKYC.JSON.Index) -> PayWingsOnboardingKYC.JSON.Index
  public subscript(position: PayWingsOnboardingKYC.JSON.Index) -> (Swift.String, PayWingsOnboardingKYC.JSON) {
    get
  }
  public typealias Element = (Swift.String, PayWingsOnboardingKYC.JSON)
  public typealias Indices = Swift.DefaultIndices<PayWingsOnboardingKYC.JSON>
  public typealias Iterator = Swift.IndexingIterator<PayWingsOnboardingKYC.JSON>
  public typealias SubSequence = Swift.Slice<PayWingsOnboardingKYC.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: PayWingsOnboardingKYC.JSONKey { get }
}
extension Swift.Int : PayWingsOnboardingKYC.JSONSubscriptType {
  public var jsonKey: PayWingsOnboardingKYC.JSONKey {
    get
  }
}
extension Swift.String : PayWingsOnboardingKYC.JSONSubscriptType {
  public var jsonKey: PayWingsOnboardingKYC.JSONKey {
    get
  }
}
extension PayWingsOnboardingKYC.JSON {
  public subscript(path: [PayWingsOnboardingKYC.JSONSubscriptType]) -> PayWingsOnboardingKYC.JSON {
    get
    set
  }
  public subscript(path: PayWingsOnboardingKYC.JSONSubscriptType...) -> PayWingsOnboardingKYC.JSON {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension PayWingsOnboardingKYC.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension PayWingsOnboardingKYC.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension PayWingsOnboardingKYC.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension PayWingsOnboardingKYC.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension PayWingsOnboardingKYC.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension PayWingsOnboardingKYC.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [PayWingsOnboardingKYC.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension PayWingsOnboardingKYC.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var array: [PayWingsOnboardingKYC.JSON]? {
    get
  }
  public var arrayValue: [PayWingsOnboardingKYC.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var dictionary: [Swift.String : PayWingsOnboardingKYC.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : PayWingsOnboardingKYC.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension PayWingsOnboardingKYC.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension PayWingsOnboardingKYC.JSON : Swift.Comparable {
}
public func == (lhs: PayWingsOnboardingKYC.JSON, rhs: PayWingsOnboardingKYC.JSON) -> Swift.Bool
public func <= (lhs: PayWingsOnboardingKYC.JSON, rhs: PayWingsOnboardingKYC.JSON) -> Swift.Bool
public func >= (lhs: PayWingsOnboardingKYC.JSON, rhs: PayWingsOnboardingKYC.JSON) -> Swift.Bool
public func > (lhs: PayWingsOnboardingKYC.JSON, rhs: PayWingsOnboardingKYC.JSON) -> Swift.Bool
public func < (lhs: PayWingsOnboardingKYC.JSON, rhs: PayWingsOnboardingKYC.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: PayWingsOnboardingKYC.writingOptionsKeys, b: PayWingsOnboardingKYC.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class PartialFormatter {
  convenience public init(phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true, maxDigits: Swift.Int? = nil)
  final public var defaultRegion: Swift.String {
    get
    set
  }
  final public var maxDigits: Swift.Int?
  final public var currentRegion: Swift.String {
    get
  }
  final public func nationalNumber(from rawNumber: Swift.String) -> Swift.String
  final public func formatPartial(_ rawNumber: Swift.String) -> Swift.String
  @objc deinit
}
public typealias AFDataResponse<Success> = PayWingsOnboardingKYC.DataResponse<Success, PayWingsOnboardingKYC.AFError>
public typealias AFDownloadResponse<Success> = PayWingsOnboardingKYC.DownloadResponse<Success, PayWingsOnboardingKYC.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension PayWingsOnboardingKYC.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PayWingsOnboardingKYC.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> PayWingsOnboardingKYC.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> PayWingsOnboardingKYC.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> PayWingsOnboardingKYC.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> PayWingsOnboardingKYC.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension PayWingsOnboardingKYC.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PayWingsOnboardingKYC.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> PayWingsOnboardingKYC.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> PayWingsOnboardingKYC.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> PayWingsOnboardingKYC.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> PayWingsOnboardingKYC.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public let AF: PayWingsOnboardingKYC.Session
extension PayWingsOnboardingKYC.PhoneNumber {
  public func adjustedNationalNumber() -> Swift.String
}
public protocol CountryPickerViewDelegate : AnyObject {
  func countryPickerView(_ countryPickerView: PayWingsOnboardingKYC.CountryPickerView, didSelectCountry country: PayWingsOnboardingKYC.Country)
  func countryPickerView(_ countryPickerView: PayWingsOnboardingKYC.CountryPickerView, willShow viewController: PayWingsOnboardingKYC.CountryPickerViewController)
  func countryPickerView(_ countryPickerView: PayWingsOnboardingKYC.CountryPickerView, didShow viewController: PayWingsOnboardingKYC.CountryPickerViewController)
}
public protocol CountryPickerViewDataSource : AnyObject {
  func preferredCountries(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> [PayWingsOnboardingKYC.Country]
  func sectionTitleForPreferredCountries(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.String?
  func showOnlyPreferredSection(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  func sectionTitleLabelFont(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIFont
  func sectionTitleLabelColor(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIColor?
  func cellLabelFont(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIFont
  func cellLabelColor(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIColor?
  func cellImageViewSize(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> CoreFoundation.CGSize
  func cellImageViewCornerRadius(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> CoreFoundation.CGFloat
  func navigationTitle(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.String?
  func closeButtonNavigationItem(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIBarButtonItem?
  func searchBarPosition(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> PayWingsOnboardingKYC.SearchBarPosition
  func showPhoneCodeInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  func showCountryCodeInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  func showCheckmarkInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  func localeForCountryNameInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Foundation.Locale
  func excludedCountries(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> [PayWingsOnboardingKYC.Country]
}
extension PayWingsOnboardingKYC.CountryPickerViewDataSource {
  public func preferredCountries(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> [PayWingsOnboardingKYC.Country]
  public func sectionTitleForPreferredCountries(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.String?
  public func showOnlyPreferredSection(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  public func sectionTitleLabelFont(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIFont
  public func sectionTitleLabelColor(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIColor?
  public func cellLabelFont(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIFont
  public func cellLabelColor(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIColor?
  public func cellImageViewCornerRadius(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> CoreFoundation.CGFloat
  public func cellImageViewSize(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> CoreFoundation.CGSize
  public func navigationTitle(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.String?
  public func closeButtonNavigationItem(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> UIKit.UIBarButtonItem?
  public func searchBarPosition(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> PayWingsOnboardingKYC.SearchBarPosition
  public func showPhoneCodeInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  public func showCountryCodeInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  public func showCheckmarkInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Swift.Bool
  public func localeForCountryNameInList(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> Foundation.Locale
  public func excludedCountries(in countryPickerView: PayWingsOnboardingKYC.CountryPickerView) -> [PayWingsOnboardingKYC.Country]
}
extension PayWingsOnboardingKYC.CountryPickerViewDelegate {
  public func countryPickerView(_ countryPickerView: PayWingsOnboardingKYC.CountryPickerView, willShow viewController: PayWingsOnboardingKYC.CountryPickerViewController)
  public func countryPickerView(_ countryPickerView: PayWingsOnboardingKYC.CountryPickerView, didShow viewController: PayWingsOnboardingKYC.CountryPickerViewController)
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: PayWingsOnboardingKYC.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: PayWingsOnboardingKYC.Request, didFailToCreateURLRequestWithError error: PayWingsOnboardingKYC.AFError)
  func request(_ request: PayWingsOnboardingKYC.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: PayWingsOnboardingKYC.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: PayWingsOnboardingKYC.AFError)
  func request(_ request: PayWingsOnboardingKYC.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: PayWingsOnboardingKYC.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: PayWingsOnboardingKYC.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: PayWingsOnboardingKYC.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: PayWingsOnboardingKYC.AFError)
  func request(_ request: PayWingsOnboardingKYC.Request, didCompleteTask task: Foundation.URLSessionTask, with error: PayWingsOnboardingKYC.AFError?)
  func requestIsRetrying(_ request: PayWingsOnboardingKYC.Request)
  func requestDidFinish(_ request: PayWingsOnboardingKYC.Request)
  func requestDidResume(_ request: PayWingsOnboardingKYC.Request)
  func request(_ request: PayWingsOnboardingKYC.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: PayWingsOnboardingKYC.Request)
  func request(_ request: PayWingsOnboardingKYC.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: PayWingsOnboardingKYC.Request)
  func request(_ request: PayWingsOnboardingKYC.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: PayWingsOnboardingKYC.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  func request(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Foundation.Data?, PayWingsOnboardingKYC.AFError>)
  func request<Value>(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Value, PayWingsOnboardingKYC.AFError>)
  func request(_ request: PayWingsOnboardingKYC.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  func request<Value>(_ request: PayWingsOnboardingKYC.DataStreamRequest, didParseStream result: Swift.Result<Value, PayWingsOnboardingKYC.AFError>)
  func request(_ request: PayWingsOnboardingKYC.UploadRequest, didCreateUploadable uploadable: PayWingsOnboardingKYC.UploadRequest.Uploadable)
  func request(_ request: PayWingsOnboardingKYC.UploadRequest, didFailToCreateUploadableWithError error: PayWingsOnboardingKYC.AFError)
  func request(_ request: PayWingsOnboardingKYC.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, PayWingsOnboardingKYC.AFError>)
  func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Foundation.URL?, PayWingsOnboardingKYC.AFError>)
  func request<Value>(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Value, PayWingsOnboardingKYC.AFError>)
}
extension PayWingsOnboardingKYC.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: PayWingsOnboardingKYC.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: PayWingsOnboardingKYC.Request, didFailToCreateURLRequestWithError error: PayWingsOnboardingKYC.AFError)
  public func request(_ request: PayWingsOnboardingKYC.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: PayWingsOnboardingKYC.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: PayWingsOnboardingKYC.AFError)
  public func request(_ request: PayWingsOnboardingKYC.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: PayWingsOnboardingKYC.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: PayWingsOnboardingKYC.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: PayWingsOnboardingKYC.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: PayWingsOnboardingKYC.AFError)
  public func request(_ request: PayWingsOnboardingKYC.Request, didCompleteTask task: Foundation.URLSessionTask, with error: PayWingsOnboardingKYC.AFError?)
  public func requestIsRetrying(_ request: PayWingsOnboardingKYC.Request)
  public func requestDidFinish(_ request: PayWingsOnboardingKYC.Request)
  public func requestDidResume(_ request: PayWingsOnboardingKYC.Request)
  public func request(_ request: PayWingsOnboardingKYC.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: PayWingsOnboardingKYC.Request)
  public func request(_ request: PayWingsOnboardingKYC.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: PayWingsOnboardingKYC.Request)
  public func request(_ request: PayWingsOnboardingKYC.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: PayWingsOnboardingKYC.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  public func request(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Foundation.Data?, PayWingsOnboardingKYC.AFError>)
  public func request<Value>(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Value, PayWingsOnboardingKYC.AFError>)
  public func request(_ request: PayWingsOnboardingKYC.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  public func request<Value>(_ request: PayWingsOnboardingKYC.DataStreamRequest, didParseStream result: Swift.Result<Value, PayWingsOnboardingKYC.AFError>)
  public func request(_ request: PayWingsOnboardingKYC.UploadRequest, didCreateUploadable uploadable: PayWingsOnboardingKYC.UploadRequest.Uploadable)
  public func request(_ request: PayWingsOnboardingKYC.UploadRequest, didFailToCreateUploadableWithError error: PayWingsOnboardingKYC.AFError)
  public func request(_ request: PayWingsOnboardingKYC.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, PayWingsOnboardingKYC.AFError>)
  public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Foundation.URL?, PayWingsOnboardingKYC.AFError>)
  public func request<Value>(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Value, PayWingsOnboardingKYC.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : PayWingsOnboardingKYC.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didFailToCreateURLRequestWithError error: PayWingsOnboardingKYC.AFError)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: PayWingsOnboardingKYC.AFError)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: PayWingsOnboardingKYC.AFError)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCompleteTask task: Foundation.URLSessionTask, with error: PayWingsOnboardingKYC.AFError?)
  final public func requestIsRetrying(_ request: PayWingsOnboardingKYC.Request)
  final public func requestDidFinish(_ request: PayWingsOnboardingKYC.Request)
  final public func requestDidResume(_ request: PayWingsOnboardingKYC.Request)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: PayWingsOnboardingKYC.Request)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: PayWingsOnboardingKYC.Request)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: PayWingsOnboardingKYC.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  final public func request(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Foundation.Data?, PayWingsOnboardingKYC.AFError>)
  final public func request<Value>(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Value, PayWingsOnboardingKYC.AFError>)
  final public func request(_ request: PayWingsOnboardingKYC.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  final public func request<Value>(_ request: PayWingsOnboardingKYC.DataStreamRequest, didParseStream result: Swift.Result<Value, PayWingsOnboardingKYC.AFError>)
  final public func request(_ request: PayWingsOnboardingKYC.UploadRequest, didCreateUploadable uploadable: PayWingsOnboardingKYC.UploadRequest.Uploadable)
  final public func request(_ request: PayWingsOnboardingKYC.UploadRequest, didFailToCreateUploadableWithError error: PayWingsOnboardingKYC.AFError)
  final public func request(_ request: PayWingsOnboardingKYC.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, PayWingsOnboardingKYC.AFError>)
  final public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  final public func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Foundation.URL?, PayWingsOnboardingKYC.AFError>)
  final public func request<Value>(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Value, PayWingsOnboardingKYC.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : PayWingsOnboardingKYC.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((PayWingsOnboardingKYC.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((PayWingsOnboardingKYC.Request, PayWingsOnboardingKYC.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((PayWingsOnboardingKYC.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((PayWingsOnboardingKYC.Request, Foundation.URLRequest, PayWingsOnboardingKYC.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((PayWingsOnboardingKYC.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTask, PayWingsOnboardingKYC.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTask, PayWingsOnboardingKYC.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((PayWingsOnboardingKYC.Request) -> Swift.Void)?
  open var requestDidFinish: ((PayWingsOnboardingKYC.Request) -> Swift.Void)?
  open var requestDidResume: ((PayWingsOnboardingKYC.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((PayWingsOnboardingKYC.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((PayWingsOnboardingKYC.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((PayWingsOnboardingKYC.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((PayWingsOnboardingKYC.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, PayWingsOnboardingKYC.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((PayWingsOnboardingKYC.DataRequest, PayWingsOnboardingKYC.DataResponse<Foundation.Data?, PayWingsOnboardingKYC.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((PayWingsOnboardingKYC.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, PayWingsOnboardingKYC.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((PayWingsOnboardingKYC.UploadRequest, PayWingsOnboardingKYC.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((PayWingsOnboardingKYC.UploadRequest, PayWingsOnboardingKYC.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((PayWingsOnboardingKYC.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((PayWingsOnboardingKYC.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, PayWingsOnboardingKYC.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((PayWingsOnboardingKYC.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((PayWingsOnboardingKYC.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, PayWingsOnboardingKYC.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((PayWingsOnboardingKYC.DownloadRequest, PayWingsOnboardingKYC.DownloadResponse<Foundation.URL?, PayWingsOnboardingKYC.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: PayWingsOnboardingKYC.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: PayWingsOnboardingKYC.Request, didFailToCreateURLRequestWithError error: PayWingsOnboardingKYC.AFError)
  open func request(_ request: PayWingsOnboardingKYC.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: PayWingsOnboardingKYC.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: PayWingsOnboardingKYC.AFError)
  open func request(_ request: PayWingsOnboardingKYC.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: PayWingsOnboardingKYC.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: PayWingsOnboardingKYC.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: PayWingsOnboardingKYC.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: PayWingsOnboardingKYC.AFError)
  open func request(_ request: PayWingsOnboardingKYC.Request, didCompleteTask task: Foundation.URLSessionTask, with error: PayWingsOnboardingKYC.AFError?)
  open func requestIsRetrying(_ request: PayWingsOnboardingKYC.Request)
  open func requestDidFinish(_ request: PayWingsOnboardingKYC.Request)
  open func requestDidResume(_ request: PayWingsOnboardingKYC.Request)
  public func request(_ request: PayWingsOnboardingKYC.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: PayWingsOnboardingKYC.Request)
  public func request(_ request: PayWingsOnboardingKYC.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: PayWingsOnboardingKYC.Request)
  public func request(_ request: PayWingsOnboardingKYC.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: PayWingsOnboardingKYC.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  open func request(_ request: PayWingsOnboardingKYC.DataRequest, didParseResponse response: PayWingsOnboardingKYC.DataResponse<Foundation.Data?, PayWingsOnboardingKYC.AFError>)
  public func request(_ request: PayWingsOnboardingKYC.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  open func request(_ request: PayWingsOnboardingKYC.UploadRequest, didCreateUploadable uploadable: PayWingsOnboardingKYC.UploadRequest.Uploadable)
  open func request(_ request: PayWingsOnboardingKYC.UploadRequest, didFailToCreateUploadableWithError error: PayWingsOnboardingKYC.AFError)
  open func request(_ request: PayWingsOnboardingKYC.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, PayWingsOnboardingKYC.AFError>)
  open func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: PayWingsOnboardingKYC.Request.ValidationResult)
  open func request(_ request: PayWingsOnboardingKYC.DownloadRequest, didParseResponse response: PayWingsOnboardingKYC.DownloadResponse<Foundation.URL?, PayWingsOnboardingKYC.AFError>)
  @objc deinit
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(PayWingsOnboardingKYC.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: PayWingsOnboardingKYC.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: PayWingsOnboardingKYC.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: PayWingsOnboardingKYC.AFError.ServerTrustFailureReason.Output, options: PayWingsOnboardingKYC.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: PayWingsOnboardingKYC.URLConvertible)
  case multipartEncodingFailed(reason: PayWingsOnboardingKYC.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: PayWingsOnboardingKYC.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: PayWingsOnboardingKYC.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: PayWingsOnboardingKYC.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: PayWingsOnboardingKYC.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: PayWingsOnboardingKYC.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: PayWingsOnboardingKYC.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: PayWingsOnboardingKYC.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> PayWingsOnboardingKYC.AFError
}
extension PayWingsOnboardingKYC.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension PayWingsOnboardingKYC.AFError {
  public var urlConvertible: PayWingsOnboardingKYC.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
}
extension PayWingsOnboardingKYC.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias MetadataCallback = (() throws -> Foundation.Data?)
@objc final public class PhoneNumberKit : ObjectiveC.NSObject {
  public init(metadataCallback: @escaping PayWingsOnboardingKYC.MetadataCallback = PhoneNumberKit.defaultMetadataCallback)
  final public func parse(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) throws -> PayWingsOnboardingKYC.PhoneNumber
  final public func parse(_ numberStrings: [Swift.String], withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false, shouldReturnFailedEmptyNumbers: Swift.Bool = false) -> [PayWingsOnboardingKYC.PhoneNumber]
  final public func isValidPhoneNumber(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) -> Swift.Bool
  final public func format(_ phoneNumber: PayWingsOnboardingKYC.PhoneNumber, toType formatType: PayWingsOnboardingKYC.PhoneNumberFormat, withPrefix prefix: Swift.Bool = true) -> Swift.String
  final public func allCountries() -> [Swift.String]
  final public func countries(withCode countryCode: Swift.UInt64) -> [Swift.String]?
  final public func mainCountry(forCode countryCode: Swift.UInt64) -> Swift.String?
  final public func countryCode(for country: Swift.String) -> Swift.UInt64?
  final public func leadingDigits(for country: Swift.String) -> Swift.String?
  final public func getRegionCode(of phoneNumber: PayWingsOnboardingKYC.PhoneNumber) -> Swift.String?
  final public func getExampleNumber(forCountry countryCode: Swift.String, ofType type: PayWingsOnboardingKYC.PhoneNumberType = .mobile) -> PayWingsOnboardingKYC.PhoneNumber?
  final public func getFormattedExampleNumber(forCountry countryCode: Swift.String, ofType type: PayWingsOnboardingKYC.PhoneNumberType = .mobile, withFormat format: PayWingsOnboardingKYC.PhoneNumberFormat = .international, withPrefix prefix: Swift.Bool = true) -> Swift.String?
  final public func metadata(for country: Swift.String) -> PayWingsOnboardingKYC.MetadataTerritory?
  final public func metadata(forCode countryCode: Swift.UInt64) -> [PayWingsOnboardingKYC.MetadataTerritory]?
  final public func possiblePhoneNumberLengths(forCountry country: Swift.String, phoneNumberType: PayWingsOnboardingKYC.PhoneNumberType, lengthType: PayWingsOnboardingKYC.PossibleLengthType) -> [Swift.Int]
  final public class func defaultRegionCode() -> Swift.String
  public static func defaultMetadataCallback() throws -> Foundation.Data?
  @objc deinit
}
extension PayWingsOnboardingKYC.PhoneNumberKit {
  public enum CountryCodePicker {
    public static var commonCountryCodes: [Swift.String]
    public static var forceModalPresentation: Swift.Bool
  }
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : PayWingsOnboardingKYC.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : PayWingsOnboardingKYC.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : PayWingsOnboardingKYC.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension PayWingsOnboardingKYC.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : PayWingsOnboardingKYC.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil) throws
}
extension PayWingsOnboardingKYC.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension PayWingsOnboardingKYC.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> PayWingsOnboardingKYC.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension PayWingsOnboardingKYC.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> PayWingsOnboardingKYC.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension PayWingsOnboardingKYC.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> PayWingsOnboardingKYC.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension PayWingsOnboardingKYC.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: PayWingsOnboardingKYC.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : PayWingsOnboardingKYC.EventMonitor {
  final public func requestDidResume(_ request: PayWingsOnboardingKYC.Request)
  final public func requestDidSuspend(_ request: PayWingsOnboardingKYC.Request)
  final public func requestDidCancel(_ request: PayWingsOnboardingKYC.Request)
  final public func requestDidFinish(_ request: PayWingsOnboardingKYC.Request)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: PayWingsOnboardingKYC.Request, didCompleteTask task: Foundation.URLSessionTask, with error: PayWingsOnboardingKYC.AFError?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PhoneNumberTextField : UIKit.UITextField, UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) final public let phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit
  @_Concurrency.MainActor(unsafe) public var flagButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func setTextUnformatted(newValue: Swift.String?)
  @_Concurrency.MainActor(unsafe) open var defaultRegion: Swift.String {
    get
    @available(*, deprecated, message: "    The setter of defaultRegion is deprecated,\n    please override defaultRegion in a subclass instead.")
    set
  }
  @_Concurrency.MainActor(unsafe) public var withPrefix: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var withFlag: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var withExamplePlaceholder: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var countryCodePlaceholderColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var numberPlaceholderColor: UIKit.UIColor {
    get
    set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) public var withDefaultPickerUI: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isPartialFormatterEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var maxDigits: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var partialFormatter: PayWingsOnboardingKYC.PartialFormatter {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var delegate: UIKit.UITextFieldDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var currentRegion: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var nationalNumber: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isValidNumber: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var phoneNumber: PayWingsOnboardingKYC.PhoneNumber? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) convenience public init(withPhoneNumberKit phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func updateFlag()
  @_Concurrency.MainActor(unsafe) open func updatePlaceholder()
  @_Concurrency.MainActor(unsafe) @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, tvOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
}
@available(iOS 11.0, *)
extension PayWingsOnboardingKYC.PhoneNumberTextField : PayWingsOnboardingKYC.CountryCodePickerDelegate {
  @_Concurrency.MainActor(unsafe) public func countryCodePickerViewControllerDidPickCountry(_ country: PayWingsOnboardingKYC.CountryCodePickerViewController.Country)
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension PayWingsOnboardingKYC.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension PayWingsOnboardingKYC.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension PayWingsOnboardingKYC.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension PayWingsOnboardingKYC.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
open class Session {
  public static let `default`: PayWingsOnboardingKYC.Session
  final public let session: Foundation.URLSession
  final public let delegate: PayWingsOnboardingKYC.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: PayWingsOnboardingKYC.RequestInterceptor?
  final public let serverTrustManager: PayWingsOnboardingKYC.ServerTrustManager?
  final public let redirectHandler: PayWingsOnboardingKYC.RedirectHandler?
  final public let cachedResponseHandler: PayWingsOnboardingKYC.CachedResponseHandler?
  final public let eventMonitor: PayWingsOnboardingKYC.CompositeEventMonitor
  final public let defaultEventMonitors: [PayWingsOnboardingKYC.EventMonitor]
  public init(session: Foundation.URLSession, delegate: PayWingsOnboardingKYC.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, serverTrustManager: PayWingsOnboardingKYC.ServerTrustManager? = nil, redirectHandler: PayWingsOnboardingKYC.RedirectHandler? = nil, cachedResponseHandler: PayWingsOnboardingKYC.CachedResponseHandler? = nil, eventMonitors: [PayWingsOnboardingKYC.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: PayWingsOnboardingKYC.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, serverTrustManager: PayWingsOnboardingKYC.ServerTrustManager? = nil, redirectHandler: PayWingsOnboardingKYC.RedirectHandler? = nil, cachedResponseHandler: PayWingsOnboardingKYC.CachedResponseHandler? = nil, eventMonitors: [PayWingsOnboardingKYC.EventMonitor] = [])
  @objc deinit
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .get, parameters: PayWingsOnboardingKYC.Parameters? = nil, encoding: PayWingsOnboardingKYC.ParameterEncoding = URLEncoding.default, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.DataRequest
  open func request<Parameters>(_ convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .get, parameters: Parameters? = nil, encoder: PayWingsOnboardingKYC.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: PayWingsOnboardingKYC.URLRequestConvertible, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil) -> PayWingsOnboardingKYC.DataRequest
  open func streamRequest<Parameters>(_ convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .get, parameters: Parameters? = nil, encoder: PayWingsOnboardingKYC.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .get, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.DataStreamRequest
  open func streamRequest(_ convertible: PayWingsOnboardingKYC.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil) -> PayWingsOnboardingKYC.DataStreamRequest
  open func download(_ convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .get, parameters: PayWingsOnboardingKYC.Parameters? = nil, encoding: PayWingsOnboardingKYC.ParameterEncoding = URLEncoding.default, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil, to destination: PayWingsOnboardingKYC.DownloadRequest.Destination? = nil) -> PayWingsOnboardingKYC.DownloadRequest
  open func download<Parameters>(_ convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .get, parameters: Parameters? = nil, encoder: PayWingsOnboardingKYC.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil, to destination: PayWingsOnboardingKYC.DownloadRequest.Destination? = nil) -> PayWingsOnboardingKYC.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: PayWingsOnboardingKYC.URLRequestConvertible, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, to destination: PayWingsOnboardingKYC.DownloadRequest.Destination? = nil) -> PayWingsOnboardingKYC.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, to destination: PayWingsOnboardingKYC.DownloadRequest.Destination? = nil) -> PayWingsOnboardingKYC.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .post, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: PayWingsOnboardingKYC.URLRequestConvertible, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .post, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: PayWingsOnboardingKYC.URLRequestConvertible, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: PayWingsOnboardingKYC.URLConvertible, method: PayWingsOnboardingKYC.HTTPMethod = .post, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: PayWingsOnboardingKYC.URLRequestConvertible, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(multipartFormData: @escaping (PayWingsOnboardingKYC.MultipartFormData) -> Swift.Void, to url: PayWingsOnboardingKYC.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: PayWingsOnboardingKYC.HTTPMethod = .post, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(multipartFormData: @escaping (PayWingsOnboardingKYC.MultipartFormData) -> Swift.Void, with request: PayWingsOnboardingKYC.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(multipartFormData: PayWingsOnboardingKYC.MultipartFormData, to url: PayWingsOnboardingKYC.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: PayWingsOnboardingKYC.HTTPMethod = .post, headers: PayWingsOnboardingKYC.HTTPHeaders? = nil, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: PayWingsOnboardingKYC.Session.RequestModifier? = nil) -> PayWingsOnboardingKYC.UploadRequest
  open func upload(multipartFormData: PayWingsOnboardingKYC.MultipartFormData, with request: PayWingsOnboardingKYC.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: PayWingsOnboardingKYC.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> PayWingsOnboardingKYC.UploadRequest
}
extension PayWingsOnboardingKYC.Session : PayWingsOnboardingKYC.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: PayWingsOnboardingKYC.Request)
  public func retryResult(for request: PayWingsOnboardingKYC.Request, dueTo error: PayWingsOnboardingKYC.AFError, completion: @escaping (PayWingsOnboardingKYC.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: PayWingsOnboardingKYC.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@available(iOS 11.0, *)
public protocol CountryCodePickerDelegate : AnyObject {
  func countryCodePickerViewControllerDidPickCountry(_ country: PayWingsOnboardingKYC.CountryCodePickerViewController.Country)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) public class CountryCodePickerViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) final public let phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit
  @_Concurrency.MainActor(unsafe) weak public var delegate: PayWingsOnboardingKYC.CountryCodePickerDelegate?
  @_Concurrency.MainActor(unsafe) public init(phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit, commonCountryCodes: [Swift.String] = PhoneNumberKit.CountryCodePicker.commonCountryCodes)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@available(iOS 11.0, *)
extension PayWingsOnboardingKYC.CountryCodePickerViewController : UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
@available(iOS 11.0, *)
extension PayWingsOnboardingKYC.CountryCodePickerViewController {
  public struct Country {
    public var code: Swift.String
    public var flag: Swift.String
    public var name: Swift.String
    public var prefix: Swift.String
    public init?(for countryCode: Swift.String, with phoneNumberKit: PayWingsOnboardingKYC.PhoneNumberKit)
  }
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Cell : UIKit.UITableViewCell {
    @objc deinit
  }
}
public struct Style {
  public struct Colors {
    public static var backgroundColor: UIKit.UIColor
    public static var secondaryBackgroundColor: UIKit.UIColor
    public static var tertiaryBackgroundColor: UIKit.UIColor
    public static var backgroundStyle: PayWingsOnboardingKYC.BackgroundStyle
    public static var mainColor: UIKit.UIColor
    public static var secondaryColor: UIKit.UIColor
    public static var tertiaryColor: UIKit.UIColor
    public static var borderColor: UIKit.UIColor
    public static var warningColor: UIKit.UIColor
    public static var titleTextColor: UIKit.UIColor
    public static var textColor: UIKit.UIColor
    public static var buttonTextColor: UIKit.UIColor
    public static var separatorColor: UIKit.UIColor
    public static var activityIndicatorColor: UIKit.UIColor
  }
  public struct Fonts {
    public static var titleText: UIKit.UIFont
    public static var text: UIKit.UIFont
  }
  public struct Shapes {
    public static var showSeparators: Swift.Bool
    public static var inputField: PayWingsOnboardingKYC.InputFieldShape
    public static var borderWidth: CoreFoundation.CGFloat
    public static var cornerRadius: CoreFoundation.CGFloat
  }
  public struct Buttons {
    public static var mainWidth: CoreFoundation.CGFloat
    public static var mainStyle: PayWingsOnboardingKYC.ButtonStyle
    public static var documentTypeWidth: CoreFoundation.CGFloat
    public static var documentTypeStyle: PayWingsOnboardingKYC.ButtonStyle
  }
  public struct Texts {
    public static var navbarTitle: Swift.String
  }
  public struct Layout {
    public static var contentLeadingTrailingMargins: CoreFoundation.CGFloat
    public static var contentTopMargin: CoreFoundation.CGFloat
  }
  public struct Other {
    public static var activityIndicatorStyle: UIKit.UIActivityIndicatorView.Style
  }
  public struct VideoScreens {
    public static var backgroundColor: UIKit.UIColor?
    public static var titleColor: UIKit.UIColor?
    public static var messageColor: UIKit.UIColor?
    public static var inputColor: UIKit.UIColor?
  }
}
public enum BackgroundStyle {
  case Default
  case CustomLight
  case CustomDark
  public static func == (a: PayWingsOnboardingKYC.BackgroundStyle, b: PayWingsOnboardingKYC.BackgroundStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum InputFieldShape {
  case Line
  case Rectangle
  public static func == (a: PayWingsOnboardingKYC.InputFieldShape, b: PayWingsOnboardingKYC.InputFieldShape) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ButtonStyle {
  case Default
  case Outlined
  case Inverted
  public static func == (a: PayWingsOnboardingKYC.ButtonStyle, b: PayWingsOnboardingKYC.ButtonStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PayWingsOnboardingKYC.URLEncoding.Destination : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncoding.Destination : Swift.Hashable {}
extension PayWingsOnboardingKYC.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension PayWingsOnboardingKYC.URLEncoding.BoolEncoding : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncoding.BoolEncoding : Swift.Hashable {}
extension PayWingsOnboardingKYC.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension PayWingsOnboardingKYC.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension PayWingsOnboardingKYC.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension PayWingsOnboardingKYC.SearchBarPosition : Swift.Equatable {}
extension PayWingsOnboardingKYC.SearchBarPosition : Swift.Hashable {}
extension PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension PayWingsOnboardingKYC.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension PayWingsOnboardingKYC.MetadataTerritory.CodingKeys : Swift.Equatable {}
extension PayWingsOnboardingKYC.MetadataTerritory.CodingKeys : Swift.Hashable {}
extension PayWingsOnboardingKYC.MetadataTerritory.CodingKeys : Swift.RawRepresentable {}
extension PayWingsOnboardingKYC.MetadataPhoneNumberFormat.CodingKeys : Swift.Equatable {}
extension PayWingsOnboardingKYC.MetadataPhoneNumberFormat.CodingKeys : Swift.Hashable {}
extension PayWingsOnboardingKYC.MetadataPhoneNumberFormat.CodingKeys : Swift.RawRepresentable {}
extension PayWingsOnboardingKYC.PhoneNumberError : Swift.Equatable {}
extension PayWingsOnboardingKYC.PhoneNumberError : Swift.Hashable {}
extension PayWingsOnboardingKYC.PhoneNumberFormat : Swift.Equatable {}
extension PayWingsOnboardingKYC.PhoneNumberFormat : Swift.Hashable {}
extension PayWingsOnboardingKYC.PhoneNumberType : Swift.Equatable {}
extension PayWingsOnboardingKYC.PhoneNumberType : Swift.Hashable {}
extension PayWingsOnboardingKYC.PhoneNumberType : Swift.RawRepresentable {}
extension PayWingsOnboardingKYC.PossibleLengthType : Swift.Equatable {}
extension PayWingsOnboardingKYC.PossibleLengthType : Swift.Hashable {}
extension PayWingsOnboardingKYC.PossibleLengthType : Swift.RawRepresentable {}
extension PayWingsOnboardingKYC.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension PayWingsOnboardingKYC.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
extension PayWingsOnboardingKYC.Request.State : Swift.Equatable {}
extension PayWingsOnboardingKYC.Request.State : Swift.Hashable {}
extension PayWingsOnboardingKYC.AuthenticationError : Swift.Equatable {}
extension PayWingsOnboardingKYC.AuthenticationError : Swift.Hashable {}
extension PayWingsOnboardingKYC.SwiftyJSONError : Swift.Equatable {}
extension PayWingsOnboardingKYC.SwiftyJSONError : Swift.Hashable {}
extension PayWingsOnboardingKYC.SwiftyJSONError : Swift.RawRepresentable {}
extension PayWingsOnboardingKYC.`Type` : Swift.Equatable {}
extension PayWingsOnboardingKYC.`Type` : Swift.Hashable {}
extension PayWingsOnboardingKYC.`Type` : Swift.RawRepresentable {}
extension PayWingsOnboardingKYC.writingOptionsKeys : Swift.Equatable {}
extension PayWingsOnboardingKYC.writingOptionsKeys : Swift.Hashable {}
extension PayWingsOnboardingKYC.BackgroundStyle : Swift.Equatable {}
extension PayWingsOnboardingKYC.BackgroundStyle : Swift.Hashable {}
extension PayWingsOnboardingKYC.InputFieldShape : Swift.Equatable {}
extension PayWingsOnboardingKYC.InputFieldShape : Swift.Hashable {}
extension PayWingsOnboardingKYC.ButtonStyle : Swift.Equatable {}
extension PayWingsOnboardingKYC.ButtonStyle : Swift.Hashable {}
