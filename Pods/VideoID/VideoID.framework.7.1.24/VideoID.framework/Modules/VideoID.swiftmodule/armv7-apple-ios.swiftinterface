// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VideoID
import AVFoundation
import AVKit
import CommonCrypto
import Foundation
import Network
import Swift
import UIKit
@_exported import VideoID
import WebRTC
import _Concurrency
import os
import zlib
@objc @_Concurrency.MainActor(unsafe) open class CustomViewController : UIKit.UIViewController, VideoID.VideoListener {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: VideoID.VideoDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(environment: VideoID.Environment, language: Swift.String?, videoService: VideoID.VideoService = .videoID)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public func finish()
  @_Concurrency.MainActor(unsafe) public func setCustomUIView(_ customUI: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) open func onStarting()
  @_Concurrency.MainActor(unsafe) open func onStarted(roi: VideoID.Quad)
  @_Concurrency.MainActor(unsafe) open func onAgentConnecting()
  @_Concurrency.MainActor(unsafe) open func onAgentConnected()
  @_Concurrency.MainActor(unsafe) open func onPhaseStarting(phase: VideoID.Phase, onCompletion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func onPhaseStarted(phase: VideoID.Phase?)
  @_Concurrency.MainActor(unsafe) open func onPhaseFinished(phase: VideoID.Phase, onCompletion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) open func onDetection(phase: VideoID.Phase?, coordinates: VideoID.Quad?)
  @_Concurrency.MainActor(unsafe) open func onNotification(code: Swift.String, message: Swift.String, level: VideoID.NotificationLevel, ttl: Swift.Int, audioUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) open func onMultimediaNotification(name: Swift.String?, title: Swift.String, message: Swift.String, actionTitle: Swift.String, videoUrl: Swift.String, imageUrl: Swift.String, audioUrl: Swift.String, ttl: Swift.Int, ack: Swift.Bool, action: VideoID.NotificationAction, type: VideoID.NotificationType, inputType: VideoID.InputType?, inputLenght: Swift.Int?, phase: VideoID.Phase?, finished: ((_ data: Swift.String?) -> ())?, action2Text: Swift.String?, action2: (() -> ())?)
  @_Concurrency.MainActor(unsafe) open func onCompleted(id: Swift.String)
  @_Concurrency.MainActor(unsafe) open func onError(code: Swift.String, message: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func rotate(orientation: UIKit.UIInterfaceOrientation, completion: (() -> ())?)
  @_Concurrency.MainActor(unsafe) public func showDetectionLoader(show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func onConfigurationLoaded(audioConfiguration: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func onDisplayHighlights(highlights: [VideoID.Highlight]?)
  @_Concurrency.MainActor(unsafe) public func onClearHighlights()
  @_Concurrency.MainActor(unsafe) public func onClearTextNotification()
  @_Concurrency.MainActor(unsafe) open func getCustomMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomFrontMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomBackMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomFaceMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomFeedbackMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomCaptchaMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomAudioCaptchaMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
  @_Concurrency.MainActor(unsafe) open func getCustomHologramMultimediaNotification() -> VideoID.CustomMultimediaNotificationView?
}
@objc public enum SimilarityLevel : Swift.Int, Swift.RawRepresentable {
  case none, high, medium, low, verylow
  public typealias RawValue = Swift.String
  public var rawValue: VideoID.SimilarityLevel.RawValue {
    get
  }
  public init?(rawValue: VideoID.SimilarityLevel.RawValue)
}
public struct Highlights : Swift.Codable {
  public var highlights: [VideoID.Highlight]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Highlight : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HighlightCoordinate : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum InputType : Swift.String, Swift.Codable {
  case string
  case number
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificationType : Swift.String, Swift.Codable {
  case text
  case video
  case image
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificationAction : Swift.String, Swift.Codable {
  case info
  case warning
  case error
  case feedback
  case input
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificationName : Swift.String {
  case wellDone
  case hologram
  case audioCaptcha
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Point : Swift.Decodable {
  public var x: CoreGraphics.CGFloat
  public var y: CoreGraphics.CGFloat
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public class WSCompression : VideoID.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CustonMultimediaNotificationHelper {
  @objc deinit
}
public class WSEngine : VideoID.Engine, VideoID.TransportEventClient, VideoID.FramerEventClient, VideoID.FrameCollectorDelegate, VideoID.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: VideoID.Transport, certPinner: VideoID.CertificatePinning? = nil, headerValidator: VideoID.HeaderValidator = FoundationSecurity(), httpHandler: VideoID.HTTPHandler = FoundationHTTPHandler(), framer: VideoID.Framer = WSFramer(), compressionHandler: VideoID.CompressionHandler? = nil)
  public func register(delegate: VideoID.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: VideoID.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: VideoID.ConnectionState)
  public func didReceiveHTTP(event: VideoID.HTTPEvent)
  public func frameProcessed(event: VideoID.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: VideoID.FrameCollector.Event)
  @objc deinit
}
public class Ack : Swift.Encodable {
  public init(videoId: Swift.String? = "", notificationId: Swift.String? = "", input: Swift.String? = "")
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: VideoID.FoundationSecurityError, b: VideoID.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension VideoID.FoundationSecurity : VideoID.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((VideoID.PinningState) -> ()))
}
extension VideoID.FoundationSecurity : VideoID.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: VideoID.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: VideoID.Frame)
  @objc deinit
}
public protocol VideoListener : AnyObject {
  func onStarting()
  func onStarted(roi: VideoID.Quad)
  func onAgentConnecting()
  func onAgentConnected()
  func onPhaseStarting(phase: VideoID.Phase, onCompletion: @escaping () -> Swift.Void)
  func onPhaseStarted(phase: VideoID.Phase?)
  func onPhaseFinished(phase: VideoID.Phase, onCompletion: @escaping () -> Swift.Void)
  func onDetection(phase: VideoID.Phase?, coordinates: VideoID.Quad?)
  func onNotification(code: Swift.String, message: Swift.String, level: VideoID.NotificationLevel, ttl: Swift.Int, audioUrl: Swift.String)
  func onMultimediaNotification(name: Swift.String?, title: Swift.String, message: Swift.String, actionTitle: Swift.String, videoUrl: Swift.String, imageUrl: Swift.String, audioUrl: Swift.String, ttl: Swift.Int, ack: Swift.Bool, action: VideoID.NotificationAction, type: VideoID.NotificationType, inputType: VideoID.InputType?, inputLenght: Swift.Int?, phase: VideoID.Phase?, finished: ((_ data: Swift.String?) -> ())?, action2Text: Swift.String?, action2: (() -> ())?)
  func onCompleted(id: Swift.String)
  func onError(code: Swift.String, message: Swift.String?)
  func onConfigurationLoaded(audioConfiguration: Swift.Bool)
  func onDisplayHighlights(highlights: [VideoID.Highlight]?)
  func onClearHighlights()
  func onClearTextNotification()
  func rotate(orientation: UIKit.UIInterfaceOrientation, completion: (() -> ())?)
  func showDetectionLoader(show: Swift.Bool)
}
public struct VideoIDMultimediaNotification {
}
@objc public protocol VideoDelegate {
  @objc func onComplete(videoID: Swift.String)
  @objc func onError(code: Swift.String, message: Swift.String?)
}
public protocol VideoIDDelegate : VideoID.VideoDelegate {
}
@objc public enum Phase : Swift.Int {
  case front, back, face
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CustomMultimediaNotificationViewInputType {
  case text
  case number
  case none
  public static func == (a: VideoID.CustomMultimediaNotificationViewInputType, b: VideoID.CustomMultimediaNotificationViewInputType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CustomMultimediaNotificationViewType {
  case feedback
  case captcha
  case audioCaptcha
  case hologram
  case view
  public static func == (a: VideoID.CustomMultimediaNotificationViewType, b: VideoID.CustomMultimediaNotificationViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CustomMultimediaNotificationViewProtocol : UIKit.UIView {
  func setValues(title: Swift.String, message: Swift.String, actionTitle: Swift.String, videoUrl: Swift.String, imageUrl: Swift.String, audioUrl: Swift.String, ttl: Swift.Int, phase: VideoID.Phase?, inputType: VideoID.CustomMultimediaNotificationViewInputType, viewType: VideoID.CustomMultimediaNotificationViewType, finished: ((Swift.String?) -> ())?)
  func setAck(data: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomMultimediaNotificationView : UIKit.UIView, VideoID.CustomMultimediaNotificationViewProtocol {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String?
  @_Concurrency.MainActor(unsafe) public var message: Swift.String?
  @_Concurrency.MainActor(unsafe) public var videoUrl: Swift.String?, imageUrl: Swift.String?, audioUrl: Swift.String?
  @_Concurrency.MainActor(unsafe) public var actionTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var ttl: Swift.Int?
  @_Concurrency.MainActor(unsafe) public var action: VideoID.NotificationAction?
  @_Concurrency.MainActor(unsafe) public var phase: VideoID.Phase?
  @_Concurrency.MainActor(unsafe) public var inputType: VideoID.CustomMultimediaNotificationViewInputType?
  @_Concurrency.MainActor(unsafe) public var viewType: VideoID.CustomMultimediaNotificationViewType?
  @_Concurrency.MainActor(unsafe) public var finished: ((_ data: Swift.String?) -> ())?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set(v)
  }
  @_Concurrency.MainActor(unsafe) open func setValues(title: Swift.String, message: Swift.String, actionTitle: Swift.String, videoUrl: Swift.String, imageUrl: Swift.String, audioUrl: Swift.String, ttl: Swift.Int, phase: VideoID.Phase?, inputType: VideoID.CustomMultimediaNotificationViewInputType, viewType: VideoID.CustomMultimediaNotificationViewType, finished: ((Swift.String?) -> ())?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) open func setAck(data: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : VideoID.HTTPServerHandler {
  public func register(delegate: VideoID.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((VideoID.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
@objc public enum NotificationLevel : Swift.Int {
  case info, warning
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class VideoIDEnvironment : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class VideoIDErrorNode : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: VideoID.TCPTransportError, b: VideoID.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : VideoID.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: VideoID.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: VideoID.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: VideoID.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: VideoID.ServerEvent)
}
public enum ServerEvent {
  case connected(VideoID.Connection, [Swift.String : Swift.String])
  case disconnected(VideoID.Connection, Swift.String, Swift.UInt16)
  case text(VideoID.Connection, Swift.String)
  case binary(VideoID.Connection, Foundation.Data)
  case pong(VideoID.Connection, Foundation.Data?)
  case ping(VideoID.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
public enum Colors : Swift.String {
  case overlayBlack
  case civitanaGreenBackground
  case civitanaGreenBorder
  case civitanaGray
  case civitana
  case notificationGreen
  case notificationRed
  case notificationBackground
  case roiBackgroundColor
  case roiLineColor
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIColor {
  open class func colorOverlayBlack() -> UIKit.UIColor
  open class func colorCivitanaGreenBackground() -> UIKit.UIColor
  open class func colorCivitanaGreenBorder() -> UIKit.UIColor
  open class func colorCivitanaGray() -> UIKit.UIColor
  open class func colorCivitana() -> UIKit.UIColor
  open class func colorNotificationGreen() -> UIKit.UIColor
  open class func colorNotificationRed() -> UIKit.UIColor
  open class func colorNotificationBackground() -> UIKit.UIColor
  open class func colorRoiBackground() -> UIKit.UIColor
  public static func hexStringToUIColor(hex: Swift.String) -> UIKit.UIColor
}
@objc public enum Process : Swift.Int, Swift.RawRepresentable, Swift.Decodable, Swift.Encodable {
  case attended, unattended
  public typealias RawValue = Swift.String
  public var rawValue: VideoID.Process.RawValue {
    get
  }
  public init?(rawValue: VideoID.Process.RawValue)
}
extension UIKit.NSLayoutConstraint {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setActive() -> UIKit.NSLayoutConstraint
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(VideoID.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: VideoID.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: VideoID.FramerEventClient)
  func createWriteFrame(opcode: VideoID.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : VideoID.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: VideoID.FramerEventClient)
  public func createWriteFrame(opcode: VideoID.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : VideoID.MyWSArrayType {
}
extension Swift.Array where Element : Swift.UnsignedInteger, Element : VideoID.MyWSArrayType {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: VideoID.ErrorType, b: VideoID.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: VideoID.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: VideoID.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension VideoID.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: VideoID.WebSocketEvent, client: VideoID.WebSocket)
}
open class WebSocket : VideoID.WebSocketClient, VideoID.EngineDelegate {
  weak public var delegate: VideoID.WebSocketDelegate?
  public var onEvent: ((VideoID.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var cookies: [Foundation.HTTPCookie]?
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: VideoID.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: VideoID.CertificatePinning? = FoundationSecurity(), compressionHandler: VideoID.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: VideoID.WebSocketEvent)
  @objc deinit
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: VideoID.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: VideoID.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: VideoID.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: VideoID.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: VideoID.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: VideoID.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: VideoID.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> VideoID.URLParts?
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: VideoID.FoundationTransportError, b: VideoID.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, VideoID.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: VideoID.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: VideoID.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, VideoID.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: VideoID.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: VideoID.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
public struct VideoIDTextNotification {
}
public enum Permissions : Swift.String, Swift.Codable {
  case Granted, Denied, Unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class VideoIDViewController : VideoID.CustomViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public init(environment: VideoID.Environment, language: Swift.String?, docType: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SynchronizedArray<T> {
  public func append(_ newElement: T)
  public func removeAtIndex(index: Swift.Int) -> T?
  public var count: Swift.Int {
    get
  }
  public func first() -> T?
  public func removeFirst() -> T?
  public subscript(index: Swift.Int) -> T {
    get
    set
  }
  @objc deinit
}
public enum DocumentType : Swift.String, Swift.Decodable {
  case idCard
  case passport
  case driverLicense
  case visa
  case face
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum VideoService : Swift.Int {
  case videoID
  case videoScan
  case smileID
  case undefined
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VideoServiceType : Swift.String {
  case videoID
  case videoScan
  case smileID
  case undefined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EidSpinner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class var sharedInstance: VideoID.EidSpinner {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) public var outerColor: UIKit.UIColor? {
    get
    set(newColor)
  }
  @_Concurrency.MainActor(unsafe) public var innerColor: UIKit.UIColor? {
    get
    set(newColor)
  }
  @_Concurrency.MainActor(unsafe) public var newColor: UIKit.UIColor? {
    get
    set(newColor)
  }
  @_Concurrency.MainActor(unsafe) public class func useContainerView(_ sv: UIKit.UIView?)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(_ title: Swift.String, animated: Swift.Bool = true) -> VideoID.EidSpinner
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(duration: Swift.Double, title: Swift.String, animated: Swift.Bool = true) -> VideoID.EidSpinner
  @_Concurrency.MainActor(unsafe) public class func show(delay: Swift.Double, title: Swift.String, animated: Swift.Bool = true)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(progress: Swift.Double, title: Swift.String) -> VideoID.EidSpinner
  @_Concurrency.MainActor(unsafe) public static var hideCancelsScheduledSpinners: Swift.Bool
  @_Concurrency.MainActor(unsafe) public class func hide(_ completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public class func setTitleFont(_ font: UIKit.UIFont?)
  @_Concurrency.MainActor(unsafe) public class func setTitleColor(_ color: UIKit.UIColor?)
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var frame: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public var animating: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func addTapHandler(_ tap: @escaping (() -> ()), subtitle subtitleText: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func clearTapHandler()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public func updateFrame()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func starting()
  @_Concurrency.MainActor(unsafe) public func loading()
  @_Concurrency.MainActor(unsafe) public func stop()
  @_Concurrency.MainActor(unsafe) public func set(color: UIKit.UIColor)
  @objc deinit
}
public class StringHTTPHandler : VideoID.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: VideoID.HTTPHandlerDelegate)
  @objc deinit
}
extension CoreAudioTypes.AudioStreamBasicDescription : Swift.Equatable {
  public static func == (lhs: CoreAudioTypes.AudioStreamBasicDescription, rhs: CoreAudioTypes.AudioStreamBasicDescription) -> Swift.Bool
}
@objc public class Quad : ObjectiveC.NSObject, Swift.Decodable {
  public var p1: VideoID.Point
  public var p2: VideoID.Point
  public var p3: VideoID.Point
  public var p4: VideoID.Point
  public var width: CoreGraphics.CGFloat {
    get
  }
  public var height: CoreGraphics.CGFloat {
    get
  }
  public init(p1: VideoID.Point, p2: VideoID.Point, p3: VideoID.Point, p4: VideoID.Point)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : VideoID.Server, VideoID.ConnectionDelegate {
  public var onEvent: ((VideoID.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: VideoID.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : VideoID.Connection, VideoID.HTTPServerDelegate, VideoID.FramerEventClient, VideoID.FrameCollectorDelegate, VideoID.TransportEventClient {
  public var onEvent: ((VideoID.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: VideoID.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: VideoID.FrameOpCode)
  public func connectionChanged(state: VideoID.ConnectionState)
  public func didReceive(event: VideoID.HTTPEvent)
  public func frameProcessed(event: VideoID.FrameEvent)
  public func didForm(event: VideoID.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func removeAllConstraints()
}
public class FoundationHTTPHandler : VideoID.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: VideoID.HTTPHandlerDelegate)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StatsAck : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class StatsAckData : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc open class Environment : ObjectiveC.NSObject {
  final public let restURL: Swift.String
  final public let wsURL: Swift.String
  final public let autorization: Swift.String
  public static let releaseDate: Swift.String
  @objc public init(url: Swift.String, autorization: Swift.String)
  @objc deinit
}
public enum FontStyle : Swift.Int {
  case Normal
  case Bold
  case Italic
  case BoldAndItalic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Style {
  public enum FontStyle : Swift.Int {
    case Normal
    case Bold
    case Italic
    case BoldAndItalic
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Preview {
    public static var backgroundColor: UIKit.UIColor
  }
  public struct Navigation {
    public static var show: Swift.Bool
    public static var textColor: UIKit.UIColor
    public static var image: UIKit.UIImage?
  }
  public struct Tick {
    public static var show: Swift.Bool
    public static var linesColor: UIKit.UIColor
    public static var linesWidth: CoreGraphics.CGFloat
    public static var durationTime: Swift.Double
  }
  public struct Notification {
    public static var show: Swift.Bool
    public static var textColor: UIKit.UIColor
    public static var backgroundColor: UIKit.UIColor
    public static var backgroundColorWarningColor: UIKit.UIColor
    public static var textSize: CoreGraphics.CGFloat
    public static var fullScreen: Swift.Bool
    public static var textFont: UIKit.UIFont?
    public static var textFontStyle: VideoID.Style.FontStyle?
  }
  public struct MultimediaNotification {
    public static var show: Swift.Bool
    public static var titleColor: UIKit.UIColor
    public static var titleFont: UIKit.UIFont?
    public static var titleTextSize: CoreGraphics.CGFloat
    public static var messageColor: UIKit.UIColor
    public static var messageFont: UIKit.UIFont?
    public static var messageTextSize: CoreGraphics.CGFloat
    public static var inputColor: UIKit.UIColor
    public static var inputFont: UIKit.UIFont?
    public static var inputTextSize: CoreGraphics.CGFloat
    public static var buttonTextColor: UIKit.UIColor
    public static var buttonTextFont: UIKit.UIFont?
    public static var buttonTitleSize: CoreGraphics.CGFloat
    public static var buttonBorderColor: UIKit.UIColor
    public static var buttonBorderWidth: CoreGraphics.CGFloat
    public static var backgroundColor: UIKit.UIColor
  }
  public struct Detection {
    public static var showDocumentDetection: Swift.Bool
    public static var showFaceDetection: Swift.Bool
    public static var documentLinesColor: UIKit.UIColor
    public static var documentLinesWidth: CoreGraphics.CGFloat
    public static var documentBackgroundColor: UIKit.UIColor
    public static var faceLineWidth: CoreGraphics.CGFloat
    public static var faceLinesColor: UIKit.UIColor
  }
  public struct Roi {
    public static var show: Swift.Bool
    public static var backgroundColor: UIKit.UIColor
    public static var linesColor: UIKit.UIColor
    public static var linesColorSuccess: UIKit.UIColor
    public static var linesWidth: CoreGraphics.CGFloat
  }
  public struct Waiting {
    public static var show: Swift.Bool
    public static var backgroundColor: UIKit.UIColor
    public static var textColor: UIKit.UIColor
    public static var textSize: CoreGraphics.CGFloat
    public static var textFont: UIKit.UIFont?
    public static var textFontStyle: VideoID.Style.FontStyle?
    public static var color: UIKit.UIColor
  }
  public struct Audio {
    public static var onImage: UIKit.UIImage?
    public static var backgroundColor: UIKit.UIColor
    public static var offImage: UIKit.UIImage?
  }
  public struct Logo {
    public static var logo: UIKit.UIImage?
  }
  public struct Highlight {
    public static var labelBackgroundColor: UIKit.UIColor
    public static var labelTextColor: UIKit.UIColor
    public static var linesColor: UIKit.UIColor
    public static var linesWidth: CoreGraphics.CGFloat
    public static var labelFont: UIKit.UIFont
  }
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: VideoID.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: VideoID.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: VideoID.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
extension VideoID.SimilarityLevel : Swift.Equatable {}
extension VideoID.SimilarityLevel : Swift.Hashable {}
extension VideoID.InputType : Swift.Equatable {}
extension VideoID.InputType : Swift.Hashable {}
extension VideoID.InputType : Swift.RawRepresentable {}
extension VideoID.NotificationType : Swift.Equatable {}
extension VideoID.NotificationType : Swift.Hashable {}
extension VideoID.NotificationType : Swift.RawRepresentable {}
extension VideoID.NotificationAction : Swift.Equatable {}
extension VideoID.NotificationAction : Swift.Hashable {}
extension VideoID.NotificationAction : Swift.RawRepresentable {}
extension VideoID.NotificationName : Swift.Equatable {}
extension VideoID.NotificationName : Swift.Hashable {}
extension VideoID.NotificationName : Swift.RawRepresentable {}
extension VideoID.FoundationSecurityError : Swift.Equatable {}
extension VideoID.FoundationSecurityError : Swift.Hashable {}
extension VideoID.Phase : Swift.Equatable {}
extension VideoID.Phase : Swift.Hashable {}
extension VideoID.Phase : Swift.RawRepresentable {}
extension VideoID.CustomMultimediaNotificationViewInputType : Swift.Equatable {}
extension VideoID.CustomMultimediaNotificationViewInputType : Swift.Hashable {}
extension VideoID.CustomMultimediaNotificationViewType : Swift.Equatable {}
extension VideoID.CustomMultimediaNotificationViewType : Swift.Hashable {}
extension VideoID.SecurityErrorCode : Swift.Equatable {}
extension VideoID.SecurityErrorCode : Swift.Hashable {}
extension VideoID.SecurityErrorCode : Swift.RawRepresentable {}
extension VideoID.NotificationLevel : Swift.Equatable {}
extension VideoID.NotificationLevel : Swift.Hashable {}
extension VideoID.NotificationLevel : Swift.RawRepresentable {}
extension VideoID.TCPTransportError : Swift.Equatable {}
extension VideoID.TCPTransportError : Swift.Hashable {}
extension VideoID.Colors : Swift.Equatable {}
extension VideoID.Colors : Swift.Hashable {}
extension VideoID.Colors : Swift.RawRepresentable {}
extension VideoID.Process : Swift.Equatable {}
extension VideoID.Process : Swift.Hashable {}
extension VideoID.CloseCode : Swift.Equatable {}
extension VideoID.CloseCode : Swift.Hashable {}
extension VideoID.CloseCode : Swift.RawRepresentable {}
extension VideoID.FrameOpCode : Swift.Equatable {}
extension VideoID.FrameOpCode : Swift.Hashable {}
extension VideoID.FrameOpCode : Swift.RawRepresentable {}
extension VideoID.ErrorType : Swift.Equatable {}
extension VideoID.ErrorType : Swift.Hashable {}
extension VideoID.FoundationTransportError : Swift.Equatable {}
extension VideoID.FoundationTransportError : Swift.Hashable {}
extension VideoID.Permissions : Swift.Equatable {}
extension VideoID.Permissions : Swift.Hashable {}
extension VideoID.Permissions : Swift.RawRepresentable {}
extension VideoID.DocumentType : Swift.Equatable {}
extension VideoID.DocumentType : Swift.Hashable {}
extension VideoID.DocumentType : Swift.RawRepresentable {}
extension VideoID.VideoService : Swift.Equatable {}
extension VideoID.VideoService : Swift.Hashable {}
extension VideoID.VideoService : Swift.RawRepresentable {}
extension VideoID.VideoServiceType : Swift.Equatable {}
extension VideoID.VideoServiceType : Swift.Hashable {}
extension VideoID.VideoServiceType : Swift.RawRepresentable {}
extension VideoID.FontStyle : Swift.Equatable {}
extension VideoID.FontStyle : Swift.Hashable {}
extension VideoID.FontStyle : Swift.RawRepresentable {}
extension VideoID.Style.FontStyle : Swift.Equatable {}
extension VideoID.Style.FontStyle : Swift.Hashable {}
extension VideoID.Style.FontStyle : Swift.RawRepresentable {}
